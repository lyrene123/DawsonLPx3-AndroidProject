package com.dawsonlpx3.canceled_class_feature;

import android.app.Fragment;
import android.content.Context;
import android.os.AsyncTask;
import android.support.annotation.Nullable;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.Toast;

import com.dawsonlpx3.R;
import com.dawsonlpx3.async_utils.DawsonRssXmlDownloadTask;
import com.dawsonlpx3.data.CanceledClassDetails;

import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * The CanceledFragment class represents a Fragment that displays a list of class cancellations,
 * obtained from the Dawson College RSS feed of class cancellations.
 *
 * @author Peter Bellefleur
 * @author Lyrene Labor
 * @author Phil Langlois
 * @author Pengkim Sy
 */
public class CanceledFragment extends Fragment {

    //tag for logging
    private final String TAG = "LPx3-Canceled";
    //dawson rss feed url
    private final String RSS_URL =
            "https://www.dawsoncollege.qc.ca/wp-content/external-includes/cancellations/feed.xml";
    View view;
    Context context;
    ListView list;
    List<CanceledClassDetails> canceled;
    private DawsonRssXmlDownloadTask task;

    /**
     * Creates and returns the View hierarchy associated with this fragment. Inflates the layout
     * for this Fragment as defined in its layout resource.
     *
     * @param inflater  A LayoutInflater.
     * @param container The parent View containing the Fragment.
     * @param savedInstanceState    The Bundle passed to the Fragment.
     * @return  The inflated View.
     */
    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                             Bundle savedInstanceState) {
        Log.d(TAG, "onCreateView");
        view = inflater.inflate(R.layout.activity_canceled, container, false);
        return view;
    }

    /**
     * Retrieves handles to View objects to be modified programmatically and the current
     * application context once the fragment's parent Activity is created. Additionally, starts a
     * DawsonRssXmlDownloadTask to retrieve information from the RSS feed in the background.
     *
     * @param savedInstanceState    The Bundle passed to the Fragment.
     */
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        list = (ListView) view.findViewById(R.id.classCancelListView);
        context = view.getContext();
        task = new DawsonRssXmlDownloadTask();
        task.execute(RSS_URL);
        try {
            populateListView(task.get());
        } catch (InterruptedException | ExecutionException  e) {
            Toast.makeText(context, getResources().getString(R.string.cancel_problem),
                    Toast.LENGTH_LONG).show();
        }
    }

    /**
     * Ensures the XML download task completed successfully, and if so, creates an adapter to
     * populate the ListView with the data retrieved.
     *
     * @param canceled  A List of CanceledClassDetails objects, generated by the XML download task.
     */
    private void populateListView(List<CanceledClassDetails> canceled) {
        this.canceled = canceled;
        //display relevant errors to user in Toast as needed
        if (canceled == null){
            Toast.makeText(context, getResources().getString(R.string.connection_error),
                    Toast.LENGTH_LONG).show();
        } else if (checkIfNoCancelled()) {
            Toast.makeText(context, getResources().getString(R.string.empty_list_error),
                    Toast.LENGTH_LONG).show();
        } else {
            //if list generated and not empty, send to adapter, assign adapter to list
            CanceledClassAdapter adapter = new CanceledClassAdapter(context, canceled);
            list.setAdapter(adapter);
        }
    }

    /**
     * Checks the data retrieved from the RSS feed to see if it represents cancelled classes, or
     * contains a message stating no classes are cancelled. If no classes are cancelled, the first
     * item in the list of CanceledClassDetails will have its title contain the string "No classes
     * cancelled." If this string is found, then no classes are found to be cancelled.
     * Additionally, no classes are found cancelled if the list is empty or null.
     *
     * @return true if no class is cancelled, false otherwise.
     */
    private boolean checkIfNoCancelled() {
        boolean isNoClassCancelled = true;
        if (canceled != null && ! canceled.isEmpty()) {
            if (! canceled.get(0).getTitle().equals("No classes cancelled.")) {
                isNoClassCancelled = false;
            }
        }
        return isNoClassCancelled;
    }
}
